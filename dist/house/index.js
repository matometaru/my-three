/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/house/index.ts":
/*!****************************!*\
  !*** ./src/house/index.ts ***!
  \****************************/
/***/ (function() {

eval("// @ts-nocheck \n(function () {\n    window.addEventListener('DOMContentLoaded', function () {\n        // special thanks! https://github.com/cocopon/tweakpane ===============\n        var PANE = new Tweakpane({\n            container: document.querySelector('#float-layer'),\n        });\n        PANE.addInput({ 'draw-box': drawBox }, 'draw-box')\n            .on('change', function (v) { drawBox = v; });\n        var RANGE = { min: -2, max: 2 };\n        PANE.addInput({ boxX: 0 }, 'boxX', RANGE)\n            .on('change', function (v) { box.position.x = v; });\n        PANE.addInput({ boxZ: 0 }, 'boxZ', RANGE)\n            .on('change', function (v) { box.position.z = v; });\n        // ====================================================================\n        window.addEventListener('click', function (event) {\n            var x = event.clientX / window.innerWidth * 2.0 - 1.0;\n            var y = event.clientY / window.innerHeight * 2.0 - 1.0;\n            var v = new THREE.Vector2(x, -y);\n            raycaster.setFromCamera(v, camera);\n            var intersects = raycaster.intersectObjects(xxx.children[0].children, true);\n            if (intersects.length > 0) {\n                // console.log(intersects[0]);\n                // alert(`\n                // ${intersects[0].object.name}\n                // ${intersects[0].object.uuid}\n                // `);\n                console.log(intersects[0].object.uuid);\n                intersects[0].object.material = selectedMaterial;\n                intersects[0].object.position.x += 10;\n            }\n        });\n        var loader = new THREE.ColladaLoader();\n        // クリック時用マテリアルのパラメータ @@@\n        var MATERIAL_PARAM_SELECTED = {\n            color: 0xff3399,\n            specular: 0xffffff,\n        };\n        selectedMaterial = new THREE.MeshPhongMaterial(MATERIAL_PARAM_SELECTED);\n        init();\n        loader.load('house.dae', function (collada) {\n            console.log(collada.scene);\n            console.log(collada.scene.children[0].children);\n            xxx = collada.scene;\n            scene.add(xxx);\n            var uuid = 'A408E4C9-BBE6-44E9-8C1C-D026D8B94123';\n            壁 = xxx.getObjectByProperty('uuid', uuid);\n            壁.position.x += 100;\n            // scene.add(collada.scene.children[0].children[2].position.set(0, 0, 0));\n            // scene.add(collada.scene.children[0].children[2].position.set(0, 0, 0));\n            // [0][1] かべ全体\n            // const y1 = collada.scene.children[0].children[1];\n            // console.log(y1);\n            // scene.add(y1);\n            // [0][2] 扉のフレーム？\n            // console.log(\"[0][2] 扉のフレーム？\");\n            // const y2 = collada.scene.children[0].children[2];\n            // y2.position.set(0, 0, 0);\n            // scene.add(y2);\n            // houseModel = collada.scene;\n            // console.log(collada.scene.children[0]);\n            // houseModel = collada.scene.children[0];\n            // console.log(collada.scene.children[0]);\n            // houseModel = collada.scene.children[0].children[0];\n            // console.log(\"こん\");\n            // var models = collada.scene;\n            // const num = models.children[0].children.length;\n            // console.log(`num = ${num}`);\n            // for (i = 0; i < num; i++) {\n            //     const modelsMesh = models.children[0].children[i];\n            //     const num2 = modelsMesh.children.length;\n            //     for (j = 0; j < num2; j++) {\n            //         if(modelsMesh.children[j] instanceof THREE.Mesh === false) {\n            //             console.log(`[${i}][${j}]: メッシュじゃない`);\n            //             // console.log(modelsMesh.children[j])\n            //         } else {\n            //             console.log(`[${i}][${j}]: メッシュです`);\n            //             scene.add(modelsMesh.children[j]);\n            //         }\n            //     }\n            // }\n            // const radian = -90 * ( Math.PI / 180 ) ;\n            // houseModel.rotateX(radian);\n            // scene.add(houseModel);\n        });\n        // 初期化処理\n        // init();\n    }, false);\n    // 汎用変数\n    var run = true; // レンダリングループフラグ\n    var isDown = false; // スペースキーが押されているかどうかのフラグ\n    var drawBox = false;\n    // three.js に関連するオブジェクト用の変数\n    var scene; // シーン\n    var camera; // カメラ\n    var renderer; // レンダラ\n    var geometry; // ジオメトリ\n    var material; // マテリアル\n    var box; // ボックスメッシュ\n    var controls; // カメラコントロール\n    var axisHelper; // 軸ヘルパーメッシュ\n    var directionalLight; // ディレクショナル・ライト（平行光源） @@@\n    var houseModel;\n    var raycaster = new THREE.Raycaster();\n    var xxx;\n    var selectedMaterial;\n    var 壁;\n    // カメラに関するパラメータ\n    var CAMERA_PARAM = {\n        fovy: 60,\n        aspect: window.innerWidth / window.innerHeight,\n        near: 0.1,\n        far: 1000.0,\n        // x: -16.100,\n        // y: -148.459707,\n        // z: 117.50494,\n        x: 3,\n        y: 0,\n        z: 0,\n        lookAt: new THREE.Vector3(0, 0, 0),\n    };\n    // レンダラに関するパラメータ\n    var RENDERER_PARAM = {\n        clearColor: 0x666666,\n        width: window.innerWidth,\n        height: window.innerHeight,\n    };\n    // マテリアルに関するパラメータ\n    var MATERIAL_PARAM = {\n        color: 0x3399ff,\n    };\n    // ライトに関するパラメータの定義 @@@\n    var DIRECTIONAL_LIGHT_PARAM = {\n        color: 0xffffff,\n        intensity: 1.0,\n        x: 1.0,\n        y: 1.0,\n        z: 1.0 // 光の向きを表すベクトルの Z 要素\n    };\n    function init() {\n        // シーン\n        scene = new THREE.Scene();\n        // レンダラ\n        renderer = new THREE.WebGLRenderer();\n        renderer.setClearColor(new THREE.Color(RENDERER_PARAM.clearColor));\n        renderer.setSize(RENDERER_PARAM.width, RENDERER_PARAM.height);\n        var wrapper = document.querySelector('#webgl');\n        wrapper.appendChild(renderer.domElement);\n        // カメラ\n        camera = new THREE.PerspectiveCamera(CAMERA_PARAM.fovy, CAMERA_PARAM.aspect, CAMERA_PARAM.near, CAMERA_PARAM.far);\n        camera.position.set(CAMERA_PARAM.x, CAMERA_PARAM.y, CAMERA_PARAM.z);\n        camera.lookAt(new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z + 1));\n        // ジオメトリ、マテリアル、メッシュ生成\n        // geometry = new THREE.BoxGeometry(0.5, 2.0, 0.5);\n        // material = new THREE.MeshLambertMaterial(MATERIAL_PARAM);\n        // box = new THREE.Mesh(geometry, material);\n        // box.position.y = 1;\n        // scene.add(box);\n        directionalLight = new THREE.DirectionalLight(DIRECTIONAL_LIGHT_PARAM.color, DIRECTIONAL_LIGHT_PARAM.intensity);\n        directionalLight.position.x = DIRECTIONAL_LIGHT_PARAM.x;\n        directionalLight.position.y = DIRECTIONAL_LIGHT_PARAM.y;\n        directionalLight.position.z = DIRECTIONAL_LIGHT_PARAM.z;\n        scene.add(directionalLight);\n        // コントロール\n        controls = new THREE.OrbitControls(camera, renderer.domElement);\n        // 軸ヘルパー\n        axisHelper = new THREE.AxisHelper(5.0);\n        scene.add(axisHelper);\n        render();\n    }\n    function render() {\n        // 再帰呼び出し\n        if (run === true) {\n            requestAnimationFrame(render);\n        }\n        // コントロールの更新\n        controls.update();\n        // スペースキーが押されたフラグが立っている場合、メッシュを操作する\n        if (isDown === true) {\n            box.rotation.y += 0.05;\n        }\n        // 描画\n        renderer.render(scene, camera);\n    }\n})();\n\n\n//# sourceURL=webpack://my-three/./src/house/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/house/index.ts"]();
/******/ 	
/******/ })()
;